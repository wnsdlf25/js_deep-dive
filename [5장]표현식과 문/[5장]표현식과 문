발표내용 구성
0.이전 학습 내용 복습

1.개요 소개

2.각 목록에 대한 설명 

3.결론 도출



0.이전 학습 내용 

  [변수]

(4_1) 변수란 무엇인가?

변수는 무엇입니까?
변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름.
->값의 위치를 가리키는 상직정인 이름.



(4_2) 식별자
변수의 데이터 타입은 무엇입니까?

(4_3) 변수 선언
변수를 사용하려면 반드시 선언이 필요하다.변수를 선언할 때는 var,let,const 키워드를 사용해야한다.

(4_4) 변수 선언의 실행 시점과 변수 호이스팅
변수 선언의 실행 시점은 런타임 이전임.
즉, 변수 선언은 소스코드가 한 줄씩 순차적으로 실행되는 시점인 런타임이 아니라 그 이전 단계에서 먼저 실행됨.

자바스크립트 엔진은 변수 선언이 소스코드의 어디에 있든 상관없이 다른 코드보다 먼저 실행합니다.
따라서 변수 선언이 소스코드의 어디에 위치하는지와 상관없이 어디서든지 변수를 참조할 수 있습니다.
이처럼 변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 변수 호이스팅이라 합니다

//변수 호이스팅을 피하려면 변수를 선언과 동시에 값을 할당하는 것이 좋다.

(4_5) 값의 할당
변수에 값을 할당(대입, 저장)할 때는 
변수 값의 할당은 변수 선언과 동시에 할 수도 있고, 변수 선언 이후에 할 수도 있습니다.
변수 값의 할당은 변수에 데이터를 저장하는 과정입니다.
변수에 데이터를 저장하면 변수에 저장된 데이터를 사용할 수 있습니다.

(4_6) 값의 재할당
값의 재할당은 이미 값이 할당된 변수에 새로운 값을 할당하는 것을 의미합니다.

var score = 80;
score = 90;

//값의 재할당은 변수의 데이터 타입과 일치하는 데이터를 할당해야 합니다.
//예를 들어 데이터 타입의 변수에 문자열 데이터를 재할당하면 오류가 발생합니다.

var score = 80;
score = "팔십";
//에러발생

(4_7) 식별자 네이밍 규칙

식별자는 변수, 함수, 클래스, 객체 속성, 기타 이름을 지정하는 데 사용됩니다. 식별자는 다음과 같은 네이밍 규칙을 준수해야 합니다.

-식별자는 알파벳 문자, 숫자, 언더스코어(_), 달러 기호($)를 포함할 수 있습니다.
-식별자는 숫자로 시작할 수 없습니다.
-예약어는 식별자로 사용할 수 없습니다.
-식별자는 유니코드 문자를 포함할 수 있습니다.
-자바스크립트에서 일반적으로 사용되는 식별자 네이밍 컨벤션은 다음과 같습니다.

----------일반적으로 사용되는 식별자 네이밍 컨벤션-
-변수, 함수, 클래스, 객체 속성은 **카멜 케이스(camelCase)**로 작성합니다.
-함수의 매개변수는 **파스칼 케이스(PascalCase)**로 작성합니다.
-상수는 **스네이크 케이스(snake_case)**로 작성합니다.




1.개요소개와  
[표현식과 문]

값

리터럴

문

표현식

표현식인 문과 표현식이 아닌 문

세미콜론과 세미콜론 자동 삽입기능

-목표: 앞으로 자주 사용할 용어의 의미를 주의깊게 살펴보자.





-값

특징&결론
"값"은 데이터를 나타내는 단위이다.
(어떤 변수나 데이터 공간에 할당되어 있는 수치나 정보이다.)

값은 다양한 유형(데이터 타입)을 가질 수 있다.


값의 타입 종류

[숫자 (Number): 정수와 소수를 나타냅니다. 예를 들어, 5나 3.14와 같은 숫자가 이에 해당합니다.

문자열 (String): 텍스트 데이터를 나타냅니다. 작은 따옴표나 큰 따옴표로 둘러싸인 문자열을 예로 들 수 있습니다. 예를 들어, 'Hello, World!'와 같은 문자열이 이에 해당합니다.

불리언 (Boolean): true 또는 false 값을 가지며, 주로 조건문과 논리 연산에서 사용됩니다.

언디파인디드 (undefined): 값이 할당되지 않은 변수나 속성의 초기값을 나타냅니다.

널 (null): 명시적으로 "값이 없음"을 나타냅니다.]




-리터럴

특징
1. 리터럴은 사람이 이해할 수 있는 문자이다. 
2. 리터럴은 변수에 할당하거나, 함수의 인수로 전달하거나, 연산의 결과로 생성할 수 있습니다.


리터럴의 종류

리터럴			                      예시						                          비고

정수 리터럴		                  100	 
부동소수점 리터럴	            	10.5	 
2진수 리터럴		                  0b01000001    					              0b로 시작
8진수 리터럴		                  0o101			                            ES6에서 도입. 0o로 시작
16진수 리터럴				            0x41			                            ES6에서 도입. 0x로 시작
문자열 리터럴				            'Hello' "World"	 
불리언 리터럴				            true
false	 
null 리터럴				              null	 
undefined 리터럴			            undefined	 
객체 리터럴			              	{ name: 'Lee', address: 'Seoul' }	 
배열 리터럴			              	[ 1, 2, 3 ]	 
함수 리터럴				              function() {}	 
정규 표현식 리터럴		            /[A-Z]+/g	 



결론.
리터럴은 값을 생성하기 위한 불가변한 표기법이며 값이 변하지 않는다.



-문

문statement는 프로그래밍 언어에서 기본적인 개념입니다. 프로그램의 흐름을 제어하고, 데이터를 처리하고, 출력을 생성하는 데 사용됩니다

특징
문은 프로그램에서 실행 가능한 최소의 독립적인 코드 조각입니다.
문은 식과 같은 내부 요소를 포함할 수 있습니다.



종류
선언문: 변수, 함수, 객체 등을 선언하는 문입니다.
var  x;
할당문/대입문: 변수에 값을 할당하는 문입니다.
x  =  5;
함수 선언문/호출문: 함수를 선언/호출하는 문입니다.
function foo () {  }
조건문: 조건에 따라 실행할 문의 흐름을 제어하는 문입니다.
if(x>1) {  console.log(x);  }
반복문: 반복적으로 실행되는 문입니다.
for(var i=0; i<2; i++) 
{  console.log(i);  }

++표준 입출력 문: 사용자로부터 입력을 받거나, 화면에 출력을 하는 문입니다.
var input = prompt("Enter your name: ");
console.log("Hello, " + input);
++null 문: 아무 작업도 수행하지 않는 문입니다.
null;

-표현식

특징

표현식은 값을 계산하는 데 사용됩니다.
표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조한다.
표현식은 변수, 리터럴, 연산자를 사용하여 작성됩니다.
문법적으로 값이 위치할 수 있는 자리에는 표현식도 위치할 수 있다.


종류

//리터럴 표현식
10
'Hello'

//식별자 표현식(선언이 이미 존재한다고 가정)
sum
person.name
arr[1]

//연산자 표현식
10 + 20
sum = 10
sum !== 10

//함수/메서드 호출 표현식(선언이 이미 존재한다고 가정)
square()
person.getName()


결론

값으로 평가될 수 있는 문(statement)은 모두 표현식이다.
변수에 값을 할당하거나, 함수의 인수로 값을 전달하거나, 연산의 결과로 값을 생성하는 데 쓰인다.




-세미콜론과 세미콜론 자동 삽입기능

1.세미콜론은 '문'의 종료를 뜻한다.
2.세미콜론 자동 삽입 기능은 자바스크립트 엔진이 초보 프로그래머가 코딩을 쉽게 할 수 있도록 하기 위해 도입되었다.

세미콜론 논쟁.
세미콜론 논쟁은 자바스크립트 커뮤니티에서 오랫동안 이어져 오고 있는 논쟁입니다. 아직까지도 세미콜론을 사용해야 하는지 여부에 대한 합의는 이루어지지 않았습니다.

세미콜론을 사용해야 한다는 입장.

세미콜론을 사용하면 코드의 가독성이 높아진다.
세미콜론을 사용하면 코드의 오류를 방지할 수 있다.

세미콜론을 사용하지 않아도 된다는 입장.

세미콜론을 사용하지 않으면 코드를 더 간결하게 작성할 수 있다.
세미콜론을 사용하지 않아도 코드의 오류를 발생시키기 어렵다.


결론
개인적으론 세미콜론을 사용하는게 나을 것 같다.






